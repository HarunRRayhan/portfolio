name: Blue-Green Zero-Downtime Deployment

on:
  push:
    branches: [ main, features/cicd-v2 ]
  pull_request:
    branches: [ main ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: 'false'
        type: boolean

env:
  DEPLOYMENT_TIMEOUT: 1800  # 30 minutes

jobs:
  deploy:
    name: Blue-Green Deployment
    runs-on: ubuntu-latest
    environment: production
    # Only run deployment if:
    # 1. It's a direct push to main/features branches, OR
    # 2. It's a merged pull request to main, OR
    # 3. It's manually triggered
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Cache deployment files
      uses: actions/cache@v3
      with:
        path: |
          deploy/.env.deploy
          deploy/.env.appprod
          deploy/portfolio-key.pem
        key: deploy-config-${{ github.sha }}
        restore-keys: |
          deploy-config-

    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Download deployment configuration
      run: |
        # Download deployment files from S3
        echo "Downloading deployment configuration files..."
        aws s3 cp s3://${{ secrets.CONFIG_BUCKET_NAME }}/secrets/envs/docker/.env deploy/.env.deploy
        aws s3 cp s3://${{ secrets.CONFIG_BUCKET_NAME }}/secrets/envs/app/.env deploy/.env.appprod
        aws s3 cp s3://${{ secrets.CONFIG_BUCKET_NAME }}/key/ssh/portfolio-key.pem deploy/portfolio-key.pem
        chmod 600 deploy/portfolio-key.pem
        
        # Verify files were downloaded
        echo "Verifying downloaded files..."
        ls -la deploy/
        echo "Configuration files downloaded successfully"

    - name: Prepare server directories
      run: |
        echo "Preparing server directories..."
        PUBLIC_IP=$(grep '^PUBLIC_IP=' deploy/.env.deploy | cut -d '=' -f2)
        
        # Create necessary directories on server
        ssh -i deploy/portfolio-key.pem -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP << 'EOF'
          echo "Creating deployment directories..."
          sudo mkdir -p /opt/portfolio/deploy/cicd
          sudo chown -R ubuntu:ubuntu /opt/portfolio/deploy
          echo "Directories created successfully"
        EOF

    - name: Execute Blue-Green Deployment
      id: deploy
      run: |
        echo "Executing blue-green deployment with enhanced script"
        
        # Determine trigger type for logging
        if [[ "${{ github.event_name }}" == "push" ]]; then
          echo "üöÄ Triggered by push to ${{ github.ref_name }}"
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "üîÄ Triggered by PR #${{ github.event.pull_request.number }} merge to ${{ github.event.pull_request.base.ref }}"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "üéØ Triggered manually"
        fi

        # Set environment variables for deployment
        export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
        export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        export CONFIG_BUCKET_NAME="${{ secrets.CONFIG_BUCKET_NAME }}"

        # Get server IP
        PUBLIC_IP=$(grep '^PUBLIC_IP=' deploy/.env.deploy | cut -d '=' -f2)
        echo "Deploying to server: $PUBLIC_IP"

        # Upload the blue-green deployment script
        echo "Uploading deployment script..."
        scp -i deploy/portfolio-key.pem -o StrictHostKeyChecking=no deploy/cicd/blue-green-deploy.sh ubuntu@$PUBLIC_IP:/opt/portfolio/deploy/cicd/
        
        # Upload status script as well
        echo "Uploading status script..."
        scp -i deploy/portfolio-key.pem -o StrictHostKeyChecking=no deploy/cicd/status.sh ubuntu@$PUBLIC_IP:/opt/portfolio/deploy/cicd/

        # Execute the blue-green deployment on the server
        echo "Executing deployment on server..."
        ssh -i deploy/portfolio-key.pem -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP << 'EOF'
          cd /opt/portfolio/deploy/cicd
          chmod +x blue-green-deploy.sh status.sh

          # Set environment variables for the deployment script
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export CONFIG_BUCKET_NAME="${{ secrets.CONFIG_BUCKET_NAME }}"

          # Execute blue-green deployment (script will auto-detect target environment)
          echo "Starting blue-green deployment..."
          ./blue-green-deploy.sh
        EOF

    - name: Verify deployment
      if: success()
      run: |
        echo "Verifying deployment..."
        PUBLIC_IP=$(grep '^PUBLIC_IP=' deploy/.env.deploy | cut -d '=' -f2)
        
        # Test public endpoints
        echo "Testing HTTP endpoint..."
        if curl -f -s --max-time 30 "http://$PUBLIC_IP" > /dev/null; then
          echo "‚úÖ HTTP endpoint is responding"
        else
          echo "‚ö†Ô∏è HTTP endpoint test failed"
        fi
        
        echo "Testing HTTPS endpoint..."
        if curl -f -s --max-time 30 "https://harun.dev" > /dev/null; then
          echo "‚úÖ HTTPS endpoint is responding"
        else
          echo "‚ö†Ô∏è HTTPS endpoint test failed"
        fi
        
        echo "Deployment verification completed"

    - name: Rollback on failure
      if: failure()
      run: |
        echo "üö® Deployment failed, attempting rollback..."
        PUBLIC_IP=$(grep '^PUBLIC_IP=' deploy/.env.deploy | cut -d '=' -f2)

        ssh -i deploy/portfolio-key.pem -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP << 'EOF'
          cd /opt/portfolio

          echo "Determining current environment for rollback..."
          
          # Get current active environment from Traefik
          CURRENT_SERVICE=$(curl -s http://localhost:8080/api/rawdata 2>/dev/null | jq -r '.http.services | to_entries[] | select(.value.loadBalancer.servers[0].url | contains("nginx_")) | .key' | head -1 2>/dev/null || echo "")
          
          if [[ "$CURRENT_SERVICE" == "web-blue" ]]; then
            ROLLBACK_ENV="green"
            CURRENT_ENV="blue"
          elif [[ "$CURRENT_SERVICE" == "web-green" ]]; then
            ROLLBACK_ENV="blue"
            CURRENT_ENV="green"
          else
            # Default rollback strategy
            ROLLBACK_ENV="blue"
            CURRENT_ENV="green"
          fi

          echo "Rolling back from $CURRENT_ENV to $ROLLBACK_ENV environment"

          # Revert Traefik configuration to rollback environment
          sed -i "s/service: web-$CURRENT_ENV/service: web-$ROLLBACK_ENV/g" docker/traefik-dynamic.yml

          # Ensure rollback environment is running
          docker compose -f docker/docker-compose.yml up -d php_$ROLLBACK_ENV nginx_$ROLLBACK_ENV

          # Stop failed current environment
          docker compose -f docker/docker-compose.yml stop php_$CURRENT_ENV nginx_$CURRENT_ENV

          echo "Rollback completed - traffic restored to $ROLLBACK_ENV environment"
        EOF

    - name: Deployment summary
      if: always()
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ github.event_name }}" == "push" ]]; then
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "- **PR:** #${{ github.event.pull_request.number }} (${{ github.event.pull_request.title }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Merged to:** ${{ github.event.pull_request.base.ref }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Production Site](https://harun.dev)" >> $GITHUB_STEP_SUMMARY
        echo "- [Traefik Dashboard](http://$(grep '^PUBLIC_IP=' deploy/.env.deploy | cut -d '=' -f2):8080)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Features" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ NPM build and asset compilation" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Cloudflare R2 asset upload" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Smart environment detection" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Zero-downtime blue-green deployment" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Comprehensive health checks" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Automatic rollback on failure" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Environment rotation for next cycle" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚ö° Performance" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Node.js dependency caching" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Deployment configuration caching" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Optimized file transfers" >> $GITHUB_STEP_SUMMARY
