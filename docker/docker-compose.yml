services:
  app-blue:
    build:
      context: /opt/portfolio
      dockerfile: deploy/docker/Dockerfile
      args:
        - NODE_ENV=production
    volumes:
      - /opt/portfolio/.env:/var/www/html/.env
      - /opt/portfolio/storage:/var/www/html/storage
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=${APP_URL}
      - DB_CONNECTION=pgsql
      - DB_HOST=db
      - DB_PORT=5432
      - DB_DATABASE=${POSTGRES_DB}
      - DB_USERNAME=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - VIEW_COMPILED_PATH=/var/www/html/storage/framework/views
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app-blue.rule=Host(`harun.dev`) && PathPrefix(`/blue`)"
      - "traefik.http.routers.app-blue.entrypoints=websecure"
      - "traefik.http.routers.app-blue.tls=true"
      - "traefik.http.routers.app-blue.tls.certresolver=default"
      - "traefik.http.services.app-blue.loadbalancer.server.port=9000"
      - "traefik.http.routers.app-http.rule=Host(`harun.dev`) || Host(`www.harun.dev`)"
      - "traefik.http.routers.app-http.entrypoints=web"
      - "traefik.http.routers.app-http.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  app-green:
    build:
      context: /opt/portfolio
      dockerfile: deploy/docker/Dockerfile
      args:
        - NODE_ENV=production
    volumes:
      - /opt/portfolio/.env:/var/www/html/.env
      - /opt/portfolio/storage:/var/www/html/storage
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=${APP_URL}
      - DB_CONNECTION=pgsql
      - DB_HOST=db
      - DB_PORT=5432
      - DB_DATABASE=${POSTGRES_DB}
      - DB_USERNAME=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - VIEW_COMPILED_PATH=/var/www/html/storage/framework/views
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app-green.rule=Host(`harun.dev`) && PathPrefix(`/green`)"
      - "traefik.http.routers.app-green.entrypoints=websecure"
      - "traefik.http.routers.app-green.tls=true"
      - "traefik.http.routers.app-green.tls.certresolver=default"
      - "traefik.http.services.app-green.loadbalancer.server.port=9000"

  traefik:
    image: traefik:v2.11
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.default.acme.httpchallenge=true
      - --certificatesresolvers.default.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.default.acme.email=${TRAEFIK_ACME_EMAIL}
      - --certificatesresolvers.default.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /opt/portfolio/ssl:/letsencrypt
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: 