services:
  php_blue:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: php-fpm
    container_name: php_blue
    networks:
      - internal
      - app-network

  php_green:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: php-fpm
    container_name: php_green
    networks:
      - internal
      - app-network

  nginx_blue:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: nginx-app
    container_name: nginx_blue
    environment:
      - CONTAINER_ROLE=nginx
    volumes:
      - ./nginx/blue.conf:/etc/nginx/nginx.conf:ro
    labels:
      - "traefik.enable=true"
    depends_on:
      - php_blue
    networks:
      - web
      - internal

  nginx_green:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: nginx-app
    container_name: nginx_green
    environment:
      - CONTAINER_ROLE=nginx
    volumes:
      - ./nginx/green.conf:/etc/nginx/nginx.conf:ro
    labels:
      - "traefik.enable=true"
    depends_on:
      - php_green
    networks:
      - web
      - internal

  traefik:
    image: traefik:v2.11
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.filename=/etc/traefik/traefik-dynamic.yml
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.le.acme.email=me@harun.dev
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik-dynamic.yml:/etc/traefik/traefik-dynamic.yml
      - ./letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
    networks:
      - web

  db:
    image: postgres:15-alpine
    env_file:
      - .env.db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10

networks:
  app-network:
    driver: bridge
  web:
    external: false
  internal:
    external: false

volumes:
  postgres_data: 